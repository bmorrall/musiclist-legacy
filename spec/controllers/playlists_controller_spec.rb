require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PlaylistsController do

  # This should return the minimal set of attributes required to create a valid
  # Playlist.
  def valid_create_attributes
    FactoryGirl.attributes_for(:playlist)
  end

  # This should return the minimal set of attributes required to update a valid
  # Playlist.
  def valid_update_attributes
    FactoryGirl.attributes_for(:playlist)
  end

  describe "GET index" do
    context  do # Within default nesting

      context 'without a user session' do
        describe 'with a valid request' do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            get :index, {}
          end
          it { should respond_with(:success) }
          it { should render_template(:index) }
          it { should render_with_layout(:application) }
          it "assigns all playlists as @playlists" do
            assigns(:playlists).should eq([@test_playlist])
          end
        end
      end
    end
  end

  describe "GET show" do
    context  do # Within default nesting

      context 'without a user session' do
        describe 'with a valid request' do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            get :show, {:id => @test_playlist.to_param}
          end
          it { should respond_with(:success) }
          it { should render_template(:show) }
          it { should render_with_layout(:application) }
          it "assigns the requested playlist as @playlist" do
            assigns(:playlist).should eq(@test_playlist)
          end
        end
      end
    end
  end

  describe "GET new" do
    context  do # Within default nesting

      context 'without a user session' do
        describe 'with a valid request' do
          before(:each) do
            get :new, {}
          end
          it { should redirect_to(new_user_session_path) }
          it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
        end
      end
      context 'as an unauthorized user' do
        login_unauthorized_user

        describe 'with a valid request' do
          before(:each) do
            get :new, {}
          end
          it { should redirect_to(playlists_url) }
          it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
        end
      end
      context 'as user with create ability' do
        login_user_with_ability :create, Playlist

        describe 'with a valid request' do
          before(:each) do
            get :new, {}
          end
          it { should respond_with(:success) }
          it { should render_template(:new) }
          it { should render_with_layout(:application) }
          it "assigns a new playlist as @playlist" do
            assigns(:playlist).should be_a_new(Playlist)
          end
        end
      end
    end
  end

  describe "GET edit" do
    context  do # Within default nesting

      context 'without a user session' do
        describe 'with a valid request' do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            get :edit, {:id => @test_playlist.to_param}
          end
          it { should redirect_to(new_user_session_path) }
          it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
        end
      end
      context 'as an unauthorized user' do
        login_unauthorized_user

        describe 'with a valid request' do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            get :edit, {:id => @test_playlist.to_param}
          end
          it { should redirect_to(playlists_url) }
          it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
        end
      end
      context 'as user with update ability' do
        login_user_with_ability :update, Playlist

        describe 'with a valid request' do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            get :edit, {:id => @test_playlist.to_param}
          end
          it { should respond_with(:success) }
          it { should render_template(:edit) }
          it { should render_with_layout(:application) }
          it "assigns the requested playlist as @playlist" do
            assigns(:playlist).should eq(@test_playlist)
          end
        end
      end
    end
  end

  describe "POST create" do
    context  do # Within default nesting

      context 'without a user session' do
        describe 'with a valid request' do
          before(:each) do
            post :create, {:playlist => valid_create_attributes}
          end
          it { should redirect_to(new_user_session_path) }
          it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
        end
      end
      context 'as an unauthorized user' do
        login_unauthorized_user

        describe "with a valid request" do
          before(:each) do
            post :create, {:playlist => valid_create_attributes}
          end
          it { should redirect_to(playlists_url) }
          it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
        end
      end
      context 'as user with create ability' do
        login_user_with_ability :create, Playlist

        describe "with valid params" do
          it "creates a new Playlist" do
            expect {
              post :create, {:playlist => valid_create_attributes}
            }.to change(Playlist, :count).by(1)
          end
        end
        describe 'with a valid request' do
          before(:each) do
            post :create, {:playlist => valid_create_attributes}
          end
          it "assigns a newly created playlist as @playlist" do
            assigns(:playlist).should be_a(Playlist)
            assigns(:playlist).should be_persisted
          end
          it { should set_the_flash[:notice].to('Playlist was successfully created.') }
          it "redirects to the created playlist" do
            response.should redirect_to(playlist_path(Playlist.last))
          end
        end
        describe "with an invalid request" do
          before(:each) do
            # Trigger the behavior that occurs when invalid params are submitted
            Playlist.any_instance.stub(:save).and_return(false)
            post :create, {:playlist => { "name" => "invalid value" }}
          end
          it { should render_template(:new) }
          it { should render_with_layout(:application) }
          it "assigns a newly created but unsaved playlist as @playlist" do
            assigns(:playlist).should be_a_new(Playlist)
          end
        end
      end
    end
  end

  describe "PUT update" do
    context  do # Within default nesting

      context 'without a user session' do
        describe 'with a valid request' do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            put :update, {:id => @test_playlist.to_param, :playlist => valid_update_attributes}
          end
          it { should redirect_to(new_user_session_path) }
          it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
        end
      end
      context 'as an unauthorized user' do
        login_unauthorized_user

        describe "with a valid request" do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            put :update, {:id => @test_playlist.to_param, :playlist => valid_update_attributes}
          end
          it { should redirect_to(playlists_url) }
          it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
        end
      end
      context 'as user with update ability' do
        login_user_with_ability :update, Playlist

        describe "with valid params" do
          it "updates the requested playlist" do
            @test_playlist = FactoryGirl.create(:playlist)
            # Assuming there are no other playlist in the database, this
            # specifies that the Playlist created on the previous line
            # receives the :update_attributes message with whatever params are
            # submitted in the request.
            Playlist.any_instance.should_receive(:update_attributes).with({ "name" => "MyString" })
            put :update, {:id => @test_playlist.to_param, :playlist => { "name" => "MyString" }}
          end
        end
        describe "with a valid request" do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            put :update, {:id => @test_playlist.to_param, :playlist => valid_update_attributes}
          end
          it "assigns the requested playlist as @playlist" do
            assigns(:playlist).should eq(@test_playlist)
          end
          it { should set_the_flash[:notice].to('Playlist was successfully updated.') }
          it "redirects to the playlist" do
            @test_playlist.reload # URL Params change
            response.should redirect_to(playlist_path(@test_playlist))
          end
        end
        describe "with an invalid request" do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            # Trigger the behavior that occurs when invalid params are submitted
            Playlist.any_instance.stub(:save).and_return(false)
            put :update, {:id => @test_playlist.to_param, :playlist => { "name" => "invalid value" }}
          end
          it { should render_template(:edit) }
          it { should render_with_layout(:application) }
          it "assigns the playlist as @playlist" do
            assigns(:playlist).should eq(@test_playlist)
          end
        end
      end
    end
  end

  describe "DELETE destroy" do
    context  do # Within default nesting

      context 'without a user session' do
        describe 'with a valid request' do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            delete :destroy, {:id => @test_playlist.to_param}
          end
          it { should redirect_to(new_user_session_path) }
          it { should set_the_flash[:alert].to("You need to sign in or sign up before continuing.") }
        end
      end
      context 'as an unauthorized user' do
        login_unauthorized_user

        describe "with a valid request" do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            delete :destroy, {:id => @test_playlist.to_param}
          end
          it { should redirect_to(playlists_url) }
          it { should set_the_flash[:alert].to("You are not authorized to access this page.") }
        end
      end
      context 'as user with destroy ability' do
        login_user_with_ability :destroy, Playlist

        it "destroys the requested playlist" do
          @test_playlist = FactoryGirl.create(:playlist)
          expect {
            delete :destroy, {:id => @test_playlist.to_param}
          }.to change(Playlist, :count).by(-1)
        end
        describe 'with a valid request' do
          before(:each) do
            @test_playlist = FactoryGirl.create(:playlist)
            delete :destroy, {:id => @test_playlist.to_param}
          end
          it { should set_the_flash[:notice].to('Playlist was successfully deleted.') }
          it "redirects to the playlist list" do
            response.should redirect_to(playlists_url)
          end
        end
      end
    end
  end

end
